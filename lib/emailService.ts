import { Resend } from 'resend'
import { EmailRecipient, DailySummary } from './types'

export class EmailService {
  private resend: Resend

  constructor(apiKey: string) {
    this.resend = new Resend(apiKey)
  }

  async sendDailySummary(recipients: EmailRecipient[], summary: DailySummary): Promise<boolean> {
    try {
      const emailPromises = recipients
        .filter(recipient => recipient.active)
        .map(recipient => this.sendEmailToRecipient(recipient, summary))

      const results = await Promise.allSettled(emailPromises)
      const successCount = results.filter(result => result.status === 'fulfilled').length

      console.log(`Email sent successfully to ${successCount}/${recipients.length} recipients`)
      return successCount > 0
    } catch (error) {
      console.error('Error sending daily summary emails:', error)
      return false
    }
  }

  private async sendEmailToRecipient(recipient: EmailRecipient, summary: DailySummary): Promise<void> {
    const emailHtml = this.generateEmailHTML(summary, recipient.name)
    const emailText = this.generateEmailText(summary, recipient.name)

    await this.resend.emails.send({
      from: 'AgentBioSummary <noreply@agentbiosummary.com>',
      to: recipient.email,
      subject: `Synthetic Biology Daily Digest - ${summary.date}`,
      html: emailHtml,
      text: emailText
    })
  }

  private generateEmailHTML(summary: DailySummary, recipientName: string): string {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Synthetic Biology Daily Digest</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px; text-align: center; }
          .content { background: white; padding: 30px; border-radius: 10px; margin-top: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
          .section { margin-bottom: 30px; }
          .section h2 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }
          .article { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #3498db; }
          .article h3 { margin: 0 0 10px 0; color: #2c3e50; }
          .article p { margin: 5px 0; color: #666; }
          .source { font-size: 12px; color: #999; }
          .footer { text-align: center; margin-top: 30px; padding: 20px; color: #666; font-size: 12px; }
          .highlight { background: #fff3cd; padding: 15px; border-radius: 5px; border-left: 4px solid #ffc107; margin: 15px 0; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>üß¨ Synthetic Biology Daily Digest</h1>
          <p>Your daily summary of the latest developments in synthetic biology</p>
          <p><strong>${summary.date}</strong></p>
        </div>
        
        <div class="content">
          <p>Hello ${recipientName},</p>
          
          <div class="section">
            <h2>üìä Daily Overview</h2>
            <div class="highlight">
              ${summary.dailySummary.replace(/\n/g, '<br>')}
            </div>
          </div>
          
          <div class="section">
            <h2>üèÜ Top 10 Articles Summary</h2>
            <div class="highlight">
              ${summary.top10Summary.replace(/\n/g, '<br>')}
            </div>
          </div>
          
          <div class="section">
            <h2>üìù Featured Articles</h2>
            ${summary.articles.slice(0, 5).map(article => `
              <div class="article">
                <h3>${article.title}</h3>
                <p>${article.summary}</p>
                <p class="source">Source: ${article.source} | Published: ${new Date(article.publishedDate).toLocaleDateString()}</p>
              </div>
            `).join('')}
          </div>
          
          <div class="section">
            <h2>üéØ Why This Matters</h2>
            <p>Synthetic biology is revolutionizing how we understand and manipulate living systems. Today's discoveries bring us closer to solving some of humanity's biggest challenges, from sustainable energy to medical breakthroughs.</p>
            <p>As a student interested in biology, these developments show you the exciting future of science and the incredible potential of genetic engineering.</p>
          </div>
        </div>
        
        <div class="footer">
          <p>This digest is automatically generated by AgentBioSummary</p>
          <p>Designed for high school students with an interest in synthetic biology</p>
          <p>To unsubscribe or change settings, please contact your administrator</p>
        </div>
      </body>
      </html>
    `
  }

  private generateEmailText(summary: DailySummary, recipientName: string): string {
    return `
Synthetic Biology Daily Digest - ${summary.date}

Hello ${recipientName},

DAILY OVERVIEW:
${summary.dailySummary}

TOP 10 ARTICLES SUMMARY:
${summary.top10Summary}

FEATURED ARTICLES:
${summary.articles.slice(0, 5).map((article, index) => `
${index + 1}. ${article.title}
   ${article.summary}
   Source: ${article.source}
   Published: ${new Date(article.publishedDate).toLocaleDateString()}
`).join('\n')}

WHY THIS MATTERS:
Synthetic biology is revolutionizing how we understand and manipulate living systems. Today's discoveries bring us closer to solving some of humanity's biggest challenges, from sustainable energy to medical breakthroughs.

As a student interested in biology, these developments show you the exciting future of science and the incredible potential of genetic engineering.

---
This digest is automatically generated by AgentBioSummary
Designed for high school students with an interest in synthetic biology
    `
  }

  async sendTestEmail(recipient: EmailRecipient): Promise<boolean> {
    try {
      const testSummary: DailySummary = {
        id: 'test',
        date: new Date().toLocaleDateString(),
        title: 'Test Summary',
        articles: [
          {
            id: 'test-1',
            title: 'Test Article: CRISPR Gene Editing Breakthrough',
            url: 'https://example.com',
            source: 'Nature',
            publishedDate: new Date().toISOString(),
            content: 'This is a test article about CRISPR gene editing.',
            summary: 'Researchers made a breakthrough in CRISPR gene editing technology.',
            relevanceScore: 9.0,
            keywords: ['crispr', 'gene editing']
          }
        ],
        top10Summary: 'This is a test summary of the top 10 articles for today.',
        dailySummary: 'This is a test daily overview of synthetic biology developments.',
        emailSent: false,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }

      await this.sendEmailToRecipient(recipient, testSummary)
      return true
    } catch (error) {
      console.error('Error sending test email:', error)
      return false
    }
  }

  async sendErrorNotification(recipients: EmailRecipient[], error: string): Promise<void> {
    try {
      const errorEmailPromises = recipients
        .filter(recipient => recipient.active)
        .map(recipient => this.resend.emails.send({
          from: 'AgentBioSummary <noreply@agentbiosummary.com>',
          to: recipient.email,
          subject: 'AgentBioSummary - System Error',
          html: `
            <h2>System Error Notification</h2>
            <p>The AgentBioSummary system encountered an error:</p>
            <pre>${error}</pre>
            <p>Please check the system logs for more details.</p>
          `
        }))

      await Promise.allSettled(errorEmailPromises)
    } catch (error) {
      console.error('Error sending error notification:', error)
    }
  }
}
